apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cicd-tutorial
  namespace: argo
spec:
  # ttlStrategy:
  #   secondsAfterCompletion: 10 # Time to live after workflow is completed, replaces ttlSecondsAfterFinished
  #   secondsAfterSuccess: 5     # Time to live after workflow is successful
  #   secondsAfterFailure: 5     # Time to live after workflow fails
  arguments:
    parameters:
      - name: branch
        value: src
      - name: gitops-branch
        value: deploy
      - name: tag
        value: 1234567
      - name: application-name
        value: cicd-tutorial
  volumes:
    - name: work-dir
      persistentVolumeClaim:
        claimName: cache

  # uncomment to pull image from private repo      
  # imagePullSecrets:
  #   - name: registry-credential

  entrypoint: main

  # exit handler
  onExit: cleanup

  templates:
    - name: main
      inputs:
        parameters:
          - name: tag
            value: '{{workflow.parameters.tag}}'
          - name: application-name
            value: '{{workflow.parameters.application-name}}'
          - name: package-name
            value: '{{workflow.parameters.package-name}}'
      dag:
        tasks:
          - name: git-clone
            template: git-clone
          - name: build-push-image-cicd-tutorial
            template: build-push-image-cicd-tutorial
            dependencies:
              - git-clone
          - name: git-ops-update
            template: git-ops-update
            dependencies:
              - build-push-image-cicd-tutorial
          # - name: argocd-sync
          #   arguments:
          #     parameters:
          #       - name: application-name
          #         value: cicd-tutorial
          #   templateRef:
          #     name: argocd-sync
          #     template: argocd-sync
          #   dependencies:
          #     - git-ops-update

    - name: git-clone
      container:
        image: alpine/git
        command:
          - sh
          - '-c'
        args:
          - git clone -b {{workflow.parameters.branch}} https://github.com/LeeKiHyuk-0404/cicd-tutorial.git {{workflow.parameters.tag}} && cd {{workflow.parameters.tag}} && git status && ls
        workingDir: /work/src
        volumeMounts:
          - name: work-dir
            mountPath: /work

    - name: build-push-image-cicd-tutorial
      container:
        name: ''
        image: gcr.io/kaniko-project/executor:v1.9.1-debug
        args:
          - '--dockerfile=/work/src/{{workflow.parameters.tag}}/slides/Dockerfile'
          - '--context=dir:///work/src/{{workflow.parameters.tag}}/slides'
          - >-
            --destination=gurdl0404/cicd-tutorial:{{workflow.parameters.tag}}
        workingDir: /work/src/{{workflow.parameters.tag}}
        volumeMounts:
          - name: kaniko-secret
            mountPath: /kaniko/.docker/
          - name: work-dir
            mountPath: /work
      volumes:
        - name: kaniko-secret
          secret:
            secretName: registry-credental
            items:
              - key: .dockerconfigjson
                path: config.json

    - name: git-ops-update
      container:
        name: ''
        image: protess/alpine-toolbox
        command:
          - sh
          - '-c'
        args:
          - >-
            git config --global user.email "gurdl0404@naver.com" && git config --global user.name "LeeKiHyuk-0404" && git clone -v -b {{workflow.parameters.gitops-branch}} https://github.com/LeeKiHyuk-0404/cicd-tutorial.git {{workflow.parameters.tag}} && cd {{workflow.parameters.tag}} && git status && ls && yq e -i '.spec.template.spec.containers[0].image = "gurdl0404/cicd-tutorial:{{workflow.parameters.tag}}"' cd/cicd-tutorial.yaml && git pull origin main --allow-unrelated-histories && git add -A && git commit -m 'Release on dev {{workflow.parameters.tag}}' && git push -f origin main https://github.com/LeeKiHyuk-0404/cicd-tutorial.git
        workingDir: /work/gitops/{{workflow.parameters.tag}}
        env:
          - name: GITHUB_PAT
            valueFrom:
              secretKeyRef:
                name: github-pat
                key: github-token
        volumeMounts:
          - name: work-dir
            mountPath: /work

    - name: cleanup
      container:
        name: ''
        image: protess/alpine-toolbox
        command:
          - sh
          - '-c'
        args:
          - rm -rf /work/gitops/{{workflow.parameters.tag}} && rm -rf /work/src/{{workflow.parameters.tag}} && ls
        workingDir: /work
        volumeMounts:
          - name: work-dir
            mountPath: /work
